--- a/include/compiler.h
+++ b/include/compiler.h
@@ -46,6 +46,10 @@ extern int errno;
 #ifdef __linux__
 # include <endian.h>
 # include <byteswap.h>
+#ifndef __GLIBC__
+typedef unsigned long ulong;
+typedef unsigned int  uint;
+#endif
 #elif defined(__MACH__)
 # include <machine/endian.h>
 typedef unsigned long ulong;
--- a/post/Makefile
+++ b/post/Makefile
@@ -54,7 +54,7 @@ postdeps:
 
 # generic POST library
 $(GPLIB): $(obj).depend $(OBJS)
-	$(AR) $(ARFLAGS) $@ $(OBJS)
+	$(call cmd_link_o_target, $(OBJS))
 
 # specific POST libraries
 $(SPLIB): $(obj).depend postdeps
@@ -62,9 +62,7 @@ $(SPLIB): $(obj).depend postdeps
 
 # the POST lib archive
 $(LIB): $(GPLIB) $(SPLIB)
-	(echo create $(LIB); for lib in $(GPLIB) $(SPLIB) ; \
-	 do echo addlib $$lib; done; echo save) \
-	| $(AR) -M
+	$(call cmd_link_o_target, $^)
 
 #########################################################################
 
--- a/config.mk
+++ b/config.mk
@@ -170,9 +170,11 @@ endif
 
 AFLAGS := $(AFLAGS_DEBUG) -D__ASSEMBLY__ $(CPPFLAGS)
 
-LDFLAGS += -Bstatic -T $(obj)u-boot.lds $(PLATFORM_LDFLAGS)
+LDFLAGS += $(PLATFORM_LDFLAGS)
+
+LDFLAGS_u-boot += -Bstatic -T $(obj)u-boot.lds $(PLATFORM_LDFLAGS)
 ifneq ($(TEXT_BASE),)
-LDFLAGS += -Ttext $(TEXT_BASE)
+LDFLAGS_u-boot += -Ttext $(CONFIG_SYS_TEXT_BASE)
 endif
 
 # Location of a usable BFD library, where we define "usable" as
@@ -198,6 +200,11 @@ BFD_ROOT_DIR =		/opt/powerpc
 endif
 endif
 
+# If the list of objects to link is empty, just create an empty built-in.o
+cmd_link_o_target = $(if $(strip $1),\
+		      $(LD) $(LDFLAGS) -r -o $@ $1,\
+		      rm -f $@; $(AR) rcs $@ )
+
 #########################################################################
 
 export	HOSTCC HOSTCFLAGS CROSS_COMPILE \
--- a/lib_mips/config.mk
+++ b/lib_mips/config.mk
@@ -27,6 +27,7 @@ STANDALONE_LOAD_ADDR ?= 0x80200000 -T mi
 
 PLATFORM_CPPFLAGS += -DCONFIG_MIPS -D__MIPS__
 
+LDFLAGS_u-boot = --gc-sections
 #
 # From Linux arch/mips/Makefile
 #
--- a/include/u-boot/u-boot.lds.h
+++ b/include/u-boot/u-boot.lds.h
@@ -16,10 +16,10 @@
 /*
  * Linker versions prior to 2.16 don't understand the builtin
  * functions SORT_BY_ALIGNMENT() and SORT_BY_NAME(), so disable these
+ *
+ *#if !LD_AT_LEAST(2, 16)
+ *# define SORT_BY_ALIGNMENT(x) x
+ *# define SORT_BY_NAME(x) x
+ *#endif
  */
-#if !LD_AT_LEAST(2, 16)
-# define SORT_BY_ALIGNMENT(x) x
-# define SORT_BY_NAME(x) x
-#endif
-
 #endif
--- a/cpu/mips/start.S
+++ b/cpu/mips/start.S
@@ -31,7 +31,7 @@
 #elif defined(CONFIG_AR7240)
   #include <asm/addrspace.h>
   #include <ar7240_soc.h>
-  #define ATH_SPI_CLOCK  0xbf000004
+  #define ATH_SPI_CLOCK 0xbf000004
 #endif
 
 	/*
@@ -46,7 +46,7 @@
 	xor	t0, 0x1f | \clr
 	mtc0	t0, CP0_STATUS
 	.set	noreorder
-	sll	zero, 3				# ehb
+	sll	zero, 3	# ehb
 	.set	pop
 	.endm
 
@@ -61,7 +61,7 @@
 #define RVECENT(f,n) \
    b f; nop
 #define XVECENT(f,bev) \
-   b f     ;           \
+   b f;           \
    li k0,bev
 
 	.set noreorder
@@ -73,7 +73,7 @@ _start:
 	RVECENT(reset,1)	/* software reboot */
 #if defined(CONFIG_INCA_IP)
 	.word INFINEON_EBU_BOOTCFG /* EBU init code, fetched during booting */
-	.word 0x00000000           /* phase of the flash                    */
+	.word 0x00000000	/* phase of the flash                    */
 #elif defined(CONFIG_PURPLE)
 	.word INFINEON_EBU_BOOTCFG /* EBU init code, fetched during booting */
 	.word INFINEON_EBU_BOOTCFG /* EBU init code, fetched during booting */
@@ -344,7 +344,7 @@ reset:
 	mfc0	k0, CP0_STATUS
 	li	k1, ~ST0_IE
 	and	k0, k1
-        mtc0	zero, CP0_CAUSE
+	mtc0	zero, CP0_CAUSE
 	mtc0	k0, CP0_STATUS
 
 	/* CAUSE register */
@@ -388,15 +388,15 @@ do_reset_normal:
     lw  t8, 0(t7)            // t8 : value of 0xb8050024
     li  t9, 0x12345678
     sw  t9, 0(t7)
-    bne t8, t9, do_reset      // if 0xb8050024 == 0x19 , go to do_cpld
+    bne t8, t9, do_reset      // if 0xb8050024 == 0x19, go to do_cpld
     nop
     b normal_path
 
 do_reset:
-    li t7, 0xb806001c       // load reset register 0x1806001c
+    li t7, 0xb806001c	// load reset register 0x1806001c
     lw t8, 0(t7)
-    li t9, 0x1000000        // bit24, fullchip reset
-    or t8, t8, t9         // t8:  set bit 18
+    li t9, 0x1000000	 // bit24, fullchip reset
+    or t8, t8, t9	 // t8:  set bit 18
     sw t8, 0(t7)
 
 normal_path:
@@ -451,14 +451,12 @@ rel_start:
 	sw	t8, 0(t7);
 #endif
 
-	/* Initialize caches...
-	 */
+	/* Initialize caches...	 */
 	la	t9, mips_cache_reset
 	jalr	t9
 	nop
 
-	/* ... and enable them.
-	 */
+	/* ... and enable them.	 */
 #if defined(CONFIG_WASP_SUPPORT) && !defined(CONFIG_ATH_NAND_BR)
 	li	t7,	KSEG1ADDR(AR7240_REV_ID)
 	lw	t7,	0(t7)
@@ -475,8 +473,7 @@ rel_start:
 	mtc0	t0, CP0_CONFIG
 #endif /* !CONFIG_SKIP_LOWLEVEL_INIT */
 
-	/* Set up temporary stack.
-	 */
+	/* Set up temporary stack.	 */
 #ifdef CONFIG_SYS_INIT_RAM_LOCK_MIPS
 	li	a0, CONFIG_SYS_INIT_SP_OFFSET
 	la	t9, mips_cache_lock
@@ -508,13 +505,13 @@ rel_start:
 	.globl	relocate_code
 	.ent	relocate_code
 relocate_code:
-	move	sp, a0		/* Set new stack pointer	*/
+	move	sp, a0	/* Set new stack pointer	*/
 
 	li	t0, CONFIG_SYS_MONITOR_BASE
 	la	t3, in_ram
 	lw	t2, -12(t3)	/* t2 <-- uboot_end_data	*/
 	move	t1, a2
-	move	s2, a2		/* s2 <-- destination address	*/
+	move	s2, a2	/* s2 <-- destination address	*/
 
 	/*
 	 * Fix $gp:
@@ -523,7 +520,7 @@ relocate_code:
 	 */
 	move	t6, gp
 	sub	gp, CONFIG_SYS_MONITOR_BASE
-	add	gp, a2		/* gp now adjusted		*/
+	add	gp, a2	/* gp now adjusted		*/
 	sub	s1, gp, t6	/* s1 <-- relocation offset	*/
 
 	/*
@@ -532,9 +529,8 @@ relocate_code:
 	 * t2 = source end address
 	 */
 
-	/*
-	 * Save destination address and size for later usage in flush_cache()
-	 */
+
+	/* Save destination address and size for later usage in flush_cache()	 */
 	move	s0, a1		/* save gd in s0		*/
 	move	a0, t1		/* a0 <-- destination addr	*/
 	sub	a1, t2, t0	/* a1 <-- size			*/
@@ -558,7 +554,7 @@ relocate_code:
 	jalr	t9
 	nop
 
-	/* Jump to where we've relocated ourselves.	 */
+	/* Jump to where we have relocated ourselves.	 */
 	addi	t0, s2, in_ram - _start
 	jr	t0
 	nop
@@ -591,7 +587,7 @@ in_ram:
 2:
 	addi	t2, 1
 	blt	t2, t3, 1b
-	addi	t4, 4		/* delay slot			*/
+	addi	t4, 4	/* delay slot			*/
 
 	/* Clear BSS.	 */
 	lw	t1, -12(t0)	/* t1 <-- uboot_end_data	*/
@@ -608,7 +604,7 @@ in_ram:
 	move	a0, s0		/* a0 <-- gd			*/
 	la	t9, board_init_r
 	jr	t9
-	move	a1, s2		/* delay slot			*/
+	move	a1, s2	/* delay slot			*/
 
 	.end	relocate_code
 
